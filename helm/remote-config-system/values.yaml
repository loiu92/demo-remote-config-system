# Default values for remote-config-system
# This is a YAML-formatted file.

# Global settings
global:
  imageRegistry: "ghcr.io"
  imagePullSecrets: []

# API Service Configuration
api:
  image:
    repository: ghcr.io/loiu92/demo-remote-config-system/api
    tag: "latest"
    pullPolicy: IfNotPresent
  
  replicaCount: 1
  
  service:
    type: ClusterIP
    port: 8080
    targetPort: 8080
  
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  
  env:
    GIN_MODE: release
  
  healthCheck:
    enabled: true
    path: /health
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5

# Demo App Configuration (React)
demoApp:
  image:
    repository: ghcr.io/loiu92/demo-remote-config-system/demo-app
    tag: "latest"
    pullPolicy: IfNotPresent
  
  replicaCount: 1
  
  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000
  
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  healthCheck:
    enabled: true
    path: /health
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5

# Dashboard Configuration
dashboard:
  image:
    repository: ghcr.io/loiu92/demo-remote-config-system/dashboard
    tag: "latest"
    pullPolicy: IfNotPresent
  
  replicaCount: 1
  
  service:
    type: ClusterIP
    port: 4000
    targetPort: 4000
  
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  healthCheck:
    enabled: true
    path: /health
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5

# PostgreSQL Configuration
postgresql:
  enabled: true
  image:
    repository: postgres
    tag: "15-alpine"
    pullPolicy: IfNotPresent
  
  replicaCount: 1
  
  service:
    type: ClusterIP
    port: 5432
    targetPort: 5432
  
  auth:
    database: remote_config
    username: postgres
    password: postgres
  
  persistence:
    enabled: true
    size: 8Gi
    storageClass: ""
  
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  
  healthCheck:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5

# Redis Configuration
redis:
  enabled: true
  image:
    repository: redis
    tag: "7-alpine"
    pullPolicy: IfNotPresent
  
  replicaCount: 1
  
  service:
    type: ClusterIP
    port: 6379
    targetPort: 6379
  
  persistence:
    enabled: true
    size: 4Gi
    storageClass: ""
  
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  healthCheck:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5

# Nginx Reverse Proxy Configuration
nginx:
  enabled: true
  image:
    repository: nginx
    tag: "alpine"
    pullPolicy: IfNotPresent
  
  replicaCount: 1
  
  service:
    type: LoadBalancer
    port: 80
    targetPort: 80
  
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

# Ingress Configuration
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: remote-config.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod Security Context
podSecurityContext:
  fsGroup: 1001

# Security Context
securityContext:
  allowPrivilegeEscalation: false
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 1001
  capabilities:
    drop:
    - ALL

# Node Selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}
