apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "remote-config-system.fullname" . }}-api
  labels:
    {{- include "remote-config-system.labels" . | nindent 4 }}
    app.kubernetes.io/component: api
spec:
  replicas: {{ .Values.api.replicaCount }}
  selector:
    matchLabels:
      {{- include "remote-config-system.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: api
  template:
    metadata:
      labels:
        {{- include "remote-config-system.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: api
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "remote-config-system.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: api
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.api.image.repository }}:{{ .Values.api.image.tag }}"
          imagePullPolicy: {{ .Values.api.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.api.service.targetPort }}
              protocol: TCP
          env:
            - name: DB_HOST
              value: {{ include "remote-config-system.fullname" . }}-postgresql
            - name: DB_PORT
              value: "{{ .Values.postgresql.service.port }}"
            - name: DB_USER
              value: {{ .Values.postgresql.auth.username }}
            - name: DB_PASSWORD
              value: {{ .Values.postgresql.auth.password }}
            - name: DB_NAME
              value: {{ .Values.postgresql.auth.database }}
            - name: REDIS_HOST
              value: {{ include "remote-config-system.fullname" . }}-redis
            - name: REDIS_PORT
              value: "{{ .Values.redis.service.port }}"
            - name: GIN_MODE
              value: {{ .Values.api.env.GIN_MODE }}
          {{- if .Values.api.healthCheck.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.api.healthCheck.path }}
              port: http
            initialDelaySeconds: {{ .Values.api.healthCheck.initialDelaySeconds }}
            periodSeconds: {{ .Values.api.healthCheck.periodSeconds }}
            timeoutSeconds: {{ .Values.api.healthCheck.timeoutSeconds }}
            failureThreshold: {{ .Values.api.healthCheck.failureThreshold }}
          readinessProbe:
            httpGet:
              path: {{ .Values.api.healthCheck.path }}
              port: http
            initialDelaySeconds: {{ .Values.api.healthCheck.initialDelaySeconds }}
            periodSeconds: {{ .Values.api.healthCheck.periodSeconds }}
            timeoutSeconds: {{ .Values.api.healthCheck.timeoutSeconds }}
            failureThreshold: {{ .Values.api.healthCheck.failureThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.api.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
