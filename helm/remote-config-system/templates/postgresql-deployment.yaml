{{- if .Values.postgresql.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "remote-config-system.fullname" . }}-postgresql
  labels:
    {{- include "remote-config-system.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgresql
spec:
  replicas: {{ .Values.postgresql.replicaCount }}
  selector:
    matchLabels:
      {{- include "remote-config-system.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: postgresql
  template:
    metadata:
      labels:
        {{- include "remote-config-system.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: postgresql
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "remote-config-system.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: postgresql
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.postgresql.image.repository }}:{{ .Values.postgresql.image.tag }}"
          imagePullPolicy: {{ .Values.postgresql.image.pullPolicy }}
          ports:
            - name: postgresql
              containerPort: {{ .Values.postgresql.service.targetPort }}
              protocol: TCP
          env:
            - name: POSTGRES_DB
              value: {{ .Values.postgresql.auth.database }}
            - name: POSTGRES_USER
              value: {{ .Values.postgresql.auth.username }}
            - name: POSTGRES_PASSWORD
              value: {{ .Values.postgresql.auth.password }}
          {{- if .Values.postgresql.healthCheck.enabled }}
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - pg_isready -U {{ .Values.postgresql.auth.username }}
            initialDelaySeconds: {{ .Values.postgresql.healthCheck.initialDelaySeconds }}
            periodSeconds: {{ .Values.postgresql.healthCheck.periodSeconds }}
            timeoutSeconds: {{ .Values.postgresql.healthCheck.timeoutSeconds }}
            failureThreshold: {{ .Values.postgresql.healthCheck.failureThreshold }}
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - pg_isready -U {{ .Values.postgresql.auth.username }}
            initialDelaySeconds: {{ .Values.postgresql.healthCheck.initialDelaySeconds }}
            periodSeconds: {{ .Values.postgresql.healthCheck.periodSeconds }}
            timeoutSeconds: {{ .Values.postgresql.healthCheck.timeoutSeconds }}
            failureThreshold: {{ .Values.postgresql.healthCheck.failureThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.postgresql.resources | nindent 12 }}
          volumeMounts:
            - name: postgresql-data
              mountPath: /var/lib/postgresql/data
            - name: postgresql-init
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: postgresql-data
          {{- if .Values.postgresql.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ include "remote-config-system.fullname" . }}-postgresql-data
          {{- else }}
          emptyDir: {}
          {{- end }}
        - name: postgresql-init
          configMap:
            name: {{ include "remote-config-system.fullname" . }}-postgresql-init
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
